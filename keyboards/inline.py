from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton


def get_menu_keyboard(role: str) -> InlineKeyboardMarkup:
    kb = []
    if role == "admin":
        kb.append([InlineKeyboardButton(text="üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
    elif role == "manager":
        kb.append([InlineKeyboardButton(text="üì¢ –ü–∞–Ω–µ–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞", callback_data="manager_panel")])
    elif role == "writer":
        kb.append([InlineKeyboardButton(text="‚úçÔ∏è –ü–∞–Ω–µ–ª—å –ø–∏—Å–∞—Ç–µ–ª—è", callback_data="writer_panel")])

    kb.extend([
        [InlineKeyboardButton(text="üì∞ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–æ–≤–æ—Å—Ç–∏", callback_data="view_news")],
        [InlineKeyboardButton(text="üìã –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏", callback_data="filter_sources")],
        [InlineKeyboardButton(text="üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="profile")],
        [InlineKeyboardButton(text="üîî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏", callback_data="manage_subscriptions")],
    ])
    return InlineKeyboardMarkup(inline_keyboard=kb)


def get_admin_panel() -> InlineKeyboardMarkup:
    kb = [
        [InlineKeyboardButton(text="üë§ –ù–∞–∑–Ω–∞—á–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞", callback_data="assign_manager")],
        [InlineKeyboardButton(text="‚úçÔ∏è –ù–∞–∑–Ω–∞—á–∏—Ç—å –ø–∏—Å–∞—Ç–µ–ª—è", callback_data="assign_writer")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞", callback_data="remove_manager")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –ø–∏—Å–∞—Ç–µ–ª—è", callback_data="remove_writer")],
        [InlineKeyboardButton(text="üì∞ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏", callback_data="review_news")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton(text="üì° –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ RSS", callback_data="manage_rss")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=kb)


def get_manager_panel() -> InlineKeyboardMarkup:
    kb = [
        [InlineKeyboardButton(text="‚úçÔ∏è –ù–∞–∑–Ω–∞—á–∏—Ç—å –ø–∏—Å–∞—Ç–µ–ª—è", callback_data="assign_writer")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –ø–∏—Å–∞—Ç–µ–ª—è", callback_data="remove_writer")],
        [InlineKeyboardButton(text="üì∞ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏", callback_data="review_news")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=kb)


def get_writer_panel() -> InlineKeyboardMarkup:
    kb = [
        [InlineKeyboardButton(text="üñå –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å", callback_data="create_news")],
        [InlineKeyboardButton(text="‚úçÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å", callback_data="edit_news")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=kb)


def get_confirmation_keyboard(confirm_data: str, cancel_data: str) -> InlineKeyboardMarkup:
    kb = [
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=confirm_data)],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=cancel_data)],
    ]
    return InlineKeyboardMarkup(inline_keyboard=kb)


def get_user_selection_keyboard(users: list, action: str) -> InlineKeyboardMarkup:
    kb = [
        [InlineKeyboardButton(text=f"ID: {user_id}", callback_data=f"select_user_{action}_{user_id}")]
        for user_id in users
    ]
    kb.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")])
    return InlineKeyboardMarkup(inline_keyboard=kb)


def get_categories_keyboard() -> InlineKeyboardMarkup:
    categories = ["—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "–ø–æ–ª–∏—Ç–∏–∫–∞", "—Å–ø–æ—Ä—Ç", "–∫—É–ª—å—Ç—É—Ä–∞", "—ç–∫–æ–Ω–æ–º–∏–∫–∞"]
    kb = [
        [InlineKeyboardButton(text=category.capitalize(), callback_data=f"category_{category}")]
        for category in categories
    ]
    kb.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")])
    return InlineKeyboardMarkup(inline_keyboard=kb)


def get_news_navigation(news: list, current_index: int, category: str = None) -> InlineKeyboardMarkup:
    kb = []
    news_id = news[current_index]["news_id"]
    kb.append([
        InlineKeyboardButton(text="üëç", callback_data=f"like_news_{news_id}"),
        InlineKeyboardButton(text="üëé", callback_data=f"dislike_news_{news_id}"),
    ])
    nav_buttons = []
    if current_index > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"prev_news_{category}_{current_index}"))
    if current_index < len(news) - 1:
        nav_buttons.append(
            InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"next_news_{category}_{current_index}"))
    if nav_buttons:
        kb.append(nav_buttons)
    kb.append([InlineKeyboardButton(text="üîô –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="view_news")])
    return InlineKeyboardMarkup(inline_keyboard=kb)


def get_sources_keyboard(sources: list, category: str) -> InlineKeyboardMarkup:
    kb = [
        [InlineKeyboardButton(text=f"{source['category'].capitalize()}: {source['url']}",
                              callback_data=f"source_{source['source_id']}_{category}")]
        for source in sources
    ]
    kb.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")])
    return InlineKeyboardMarkup(inline_keyboard=kb)


def get_rss_management_keyboard(sources: list) -> InlineKeyboardMarkup:
    kb = [
        [InlineKeyboardButton(
            text=f"{source['category'].capitalize()}: {source['url']} {'‚úÖ' if source['is_active'] else '‚ùå'}",
            callback_data=f"toggle_source_{source['source_id']}"
        )] for source in sources
    ]
    kb.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")])
    return InlineKeyboardMarkup(inline_keyboard=kb)


def get_writer_news_keyboard(published: list, pending: list) -> InlineKeyboardMarkup:
    kb = []
    if published:
        kb.append([InlineKeyboardButton(text="üìú –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏", callback_data="dummy")])
        for news in published:
            kb.append([
                InlineKeyboardButton(
                    text=f"ID {news['news_id']}: {news['title']}",
                    callback_data=f"edit_published_{news['news_id']}"
                )
            ])
    if pending:
        kb.append([InlineKeyboardButton(text="‚è≥ –ù–æ–≤–æ—Å—Ç–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ", callback_data="dummy")])
        for news in pending:
            kb.append([
                InlineKeyboardButton(
                    text=f"ID {news['pending_id']}: {news['title']}",
                    callback_data=f"edit_pending_{news['pending_id']}"
                )
            ])
    kb.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="writer_panel")])
    return InlineKeyboardMarkup(inline_keyboard=kb)


def get_subscription_keyboard(subscribed_categories: list) -> InlineKeyboardMarkup:
    categories = ["—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "–ø–æ–ª–∏—Ç–∏–∫–∞", "—Å–ø–æ—Ä—Ç", "–∫—É–ª—å—Ç—É—Ä–∞", "—ç–∫–æ–Ω–æ–º–∏–∫–∞"]
    kb = []
    for category in categories:
        is_subscribed = category in subscribed_categories
        kb.append([
            InlineKeyboardButton(
                text=f"{category.capitalize()} {'‚úÖ' if is_subscribed else '‚ùå'}",
                callback_data=f"{'unsubscribe' if is_subscribed else 'subscribe'}_{category}"
            )
        ])
    kb.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")])
    return InlineKeyboardMarkup(inline_keyboard=kb)