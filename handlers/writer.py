from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from keyboards.inline import get_writer_news_keyboard
from utils.database import get_user_role, insert_pending_news, get_writer_news, update_pending_news, delete_pending_news
from utils.logger import logger
from utils.database import check_limit, increment_limit
from aiogram.exceptions import TelegramBadRequest

router = Router()

class NewsCreation(StatesGroup):
    title = State()
    description = State()
    image_url = State()
    category = State()

class NewsEditing(StatesGroup):
    editing = State()

@router.callback_query(lambda c: c.data == "writer_panel")
async def writer_panel(callback: CallbackQuery):
    user_id = callback.from_user.id
    role = await get_user_role(user_id)
    if role != "writer":
        await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!", show_alert=True)
        return

    published, pending = await get_writer_news(user_id)
    if not published and not pending:
        new_text = "‚úçÔ∏è –ü–∞–Ω–µ–ª—å –ø–∏—Å–∞—Ç–µ–ª—è\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–≤–æ–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π üì≠\n–ù–∞–∂–º–∏—Ç–µ '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å' –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞–ø–∏—Å–∞—Ç—å —Å—Ç–∞—Ç—å—é üëá"
    else:
        new_text = "‚úçÔ∏è –ü–∞–Ω–µ–ª—å –ø–∏—Å–∞—Ç–µ–ª—è\n–í–∞—à–∏ –Ω–æ–≤–æ—Å—Ç–∏ –∏ –¥–µ–π—Å—Ç–≤–∏—è üëá"

    new_keyboard = get_writer_news_keyboard(published, pending)

    try:
        await callback.message.edit_text(
            new_text,
            reply_markup=new_keyboard
        )
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await callback.answer("‚ÑπÔ∏è –ü–∞–Ω–µ–ª—å —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞.")
        else:
            logger.error(f"Error in writer_panel for user {user_id}: {str(e)}")
            raise
    except Exception as e:
        logger.error(f"Error in writer_panel for user {user_id}: {str(e)}")
        raise

    await callback.answer()
    logger.info(f"User {user_id} opened writer panel.")

@router.callback_query(lambda c: c.data == "create_news")
async def create_news(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    role = await get_user_role(user_id)
    if role != "admin":  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        allowed, current_count, total_limit = await check_limit(user_id, "create_news")
        if not allowed:
            await callback.message.edit_text(
                f"‚ö†Ô∏è –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ª–∏–º–∏—Ç—ã –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π ({current_count}/{total_limit})!\n"
                "–•–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ—Å—Ç—ã? üíé",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üíé –ö—É–ø–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ª–∏–º–∏—Ç—ã", callback_data="buy_limits_create_news")],
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="writer_panel")]
                ])
            )
            await callback.answer()
            logger.info(f"User {user_id} reached create limit: {current_count}/{total_limit}")
            return

    await state.clear()
    await callback.message.edit_text(
        "üñå –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏\n–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏:"
    )
    await state.set_state(NewsCreation.title)
    current_state = await state.get_state()
    logger.info(f"User {callback.from_user.id} started creating news. Set state: {current_state}")
    await callback.answer()

@router.message(NewsCreation.title, F.text)
async def process_title(message: Message, state: FSMContext):
    current_state = await state.get_state()
    logger.info(f"Processing title for user {message.from_user.id}. Current state: {current_state}")
    await state.update_data(title=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏:")
    await state.set_state(NewsCreation.description)
    new_state = await state.get_state()
    logger.info(f"User {message.from_user.id} set news title: {message.text}. New state: {new_state}")

@router.message(NewsCreation.description)
async def process_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ URL –∫–∞—Ä—Ç–∏–Ω–∫–∏ (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ, –æ—Ç–ø—Ä–∞–≤–∏–≤ '-'):")
    await state.set_state(NewsCreation.image_url)
    logger.info(f"User {message.from_user.id} set news description: {message.text}")

@router.message(NewsCreation.image_url)
async def process_image_url(message: Message, state: FSMContext):
    image_url = None if message.text == "-" else message.text
    await state.update_data(image_url=image_url)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–æ–≤–æ—Å—Ç–∏:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="General", callback_data="category_general")],
            [InlineKeyboardButton(text="Business", callback_data="category_business")],
            [InlineKeyboardButton(text="Technology", callback_data="category_technology")],
            [InlineKeyboardButton(text="Entertainment", callback_data="category_entertainment")],
            [InlineKeyboardButton(text="Sports", callback_data="category_sports")],
        ])
    )
    await state.set_state(NewsCreation.category)
    logger.info(f"User {message.from_user.id} set news image URL: {image_url}")

@router.callback_query(lambda c: c.data.startswith("category_"), NewsCreation.category)
async def process_category(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    role = await get_user_role(user_id)
    if role != "admin":  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        await increment_limit(user_id, "create_news")

    category = callback.data.split("_")[1]
    data = await state.get_data()
    title = data["title"]
    description = data["description"]
    image_url = data["image_url"]

    pending_id = await insert_pending_news(user_id, title, description, image_url, category)
    published, pending = await get_writer_news(user_id)

    await callback.message.edit_text(
        f"‚úÖ –ù–æ–≤–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É! ID: {pending_id}\n",
        reply_markup=get_writer_news_keyboard(published, pending)
    )
    await state.clear()
    await callback.answer()
    logger.info(f"User {user_id} created pending news ID {pending_id} in category {category}.")

@router.callback_query(lambda c: c.data.startswith("edit_published_") or c.data.startswith("edit_pending_"))
async def edit_news(callback: CallbackQuery, state: FSMContext):
    news_type, news_id = callback.data.split("_")[1], int(callback.data.split("_")[2])
    published, pending = await get_writer_news(callback.from_user.id)
    news = None
    for item in (published if news_type == "published" else pending):
        if item[f"{news_type}_id"] == news_id:
            news = item
            break

    if not news:
        await callback.message.edit_text(
            "‚ùå –ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
            reply_markup=get_writer_news_keyboard(published, pending)
        )
        await callback.answer()
        return

    await state.update_data(news_id=news_id, news_type=news_type)
    await callback.message.edit_text(
        f"‚úçÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ (ID: {news_id})\n"
        f"–¢–µ–∫—É—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫: {news['title']}\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ, –æ—Ç–ø—Ä–∞–≤–∏–≤ '-'):"
    )
    await state.set_state(NewsEditing.editing)
    await callback.answer()
    logger.info(f"User {callback.from_user.id} started editing {news_type} news ID {news_id}.")

@router.message(NewsEditing.editing)
async def process_edit(message: Message, state: FSMContext):
    data = await state.get_data()
    news_id = data["news_id"]
    news_type = data["news_type"]
    title = message.text if message.text != "-" else None

    published, pending = await get_writer_news(message.from_user.id)
    news = None
    for item in (published if news_type == "published" else pending):
        if item[f"{news_type}_id"] == news_id:
            news = item
            break

    if not news:
        await message.answer(
            "‚ùå –ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
            reply_markup=get_writer_news_keyboard(published, pending)
        )
        await state.clear()
        return

    description = news["description"]
    image_url = news["image_url"]
    category = news["category"]

    if title:
        news["title"] = title
    await message.answer(
        f"–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ, –æ—Ç–ø—Ä–∞–≤–∏–≤ '-'):"
    )
    await state.update_data(title=news["title"], description=description, image_url=image_url, category=category)
    await state.set_state(NewsEditing.editing)
    logger.info(f"User {message.from_user.id} updated title for {news_type} news ID {news_id}: {title}")

@router.message(NewsEditing.editing)
async def process_edit_description(message: Message, state: FSMContext):
    data = await state.get_data()
    description = message.text if message.text != "-" else data["description"]
    await state.update_data(description=description)
    await message.answer(
        f"–¢–µ–∫—É—â–∏–π URL –∫–∞—Ä—Ç–∏–Ω–∫–∏: {data['image_url']}\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π URL (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ, –æ—Ç–ø—Ä–∞–≤–∏–≤ '-'):"
    )
    await state.set_state(NewsEditing.editing)
    logger.info(f"User {message.from_user.id} updated description: {description}")

@router.message(NewsEditing.editing)
async def process_edit_image_url(message: Message, state: FSMContext):
    data = await state.get_data()
    image_url = message.text if message.text != "-" else data["image_url"]
    await state.update_data(image_url=image_url)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–æ–≤–æ—Å—Ç–∏:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="General", callback_data="edit_category_general")],
            [InlineKeyboardButton(text="Business", callback_data="edit_category_business")],
            [InlineKeyboardButton(text="Technology", callback_data="edit_category_technology")],
            [InlineKeyboardButton(text="Entertainment", callback_data="edit_category_entertainment")],
            [InlineKeyboardButton(text="Sports", callback_data="edit_category_sports")],
        ])
    )
    await state.set_state(NewsEditing.editing)
    logger.info(f"User {message.from_user.id} updated image URL: {image_url}")

@router.callback_query(lambda c: c.data.startswith("edit_category_"), NewsEditing.editing)
async def process_edit_category(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    news_id = data["news_id"]
    news_type = data["news_type"]
    category = callback.data.split("_")[2]

    await update_pending_news(
        news_id=news_id,
        title=data["title"],
        description=data["description"],
        image_url=data["image_url"],
        category=category,
        is_published=(news_type == "published")
    )

    published, pending = await get_writer_news(callback.from_user.id)
    await callback.message.edit_text(
        f"‚úÖ –ù–æ–≤–æ—Å—Ç—å ID {news_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞!",
        reply_markup=get_writer_news_keyboard(published, pending)
    )
    await state.clear()
    await callback.answer()
    logger.info(f"User {callback.from_user.id} updated {news_type} news ID {news_id} in category {category}.")

@router.callback_query(lambda c: c.data.startswith("delete_published_") or c.data.startswith("delete_pending_"))
async def delete_news(callback: CallbackQuery):
    news_type, news_id = callback.data.split("_")[1], int(callback.data.split("_")[2])
    await delete_pending_news(news_id, is_published=(news_type == "published"))
    published, pending = await get_writer_news(callback.from_user.id)

    await callback.message.edit_text(
        f"üóë –ù–æ–≤–æ—Å—Ç—å ID {news_id} —É–¥–∞–ª–µ–Ω–∞!",
        reply_markup=get_writer_news_keyboard(published, pending)
    )
    await callback.answer()
    logger.info(f"User {callback.from_user.id} deleted {news_type} news ID {news_id}.")