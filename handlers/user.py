import aiosqlite
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from keyboards.inline import get_menu_keyboard, get_categories_keyboard, get_news_navigation, get_sources_keyboard, \
    get_subscription_keyboard, get_purchase_keyboard, get_quantity_keyboard, get_profile_keyboard
from utils.database import get_user_role, get_news, get_news_by_id, set_news_rating, get_news_rating, \
    get_user_rating, get_user_stats, check_limit, increment_limit, add_limit, add_purchase, get_user_subscriptions, \
    unsubscribe_from_category, subscribe_to_category, get_sources
from utils.payment import create_payment, check_payment
from utils.logger import logger

router = Router()

class NewsViewing(StatesGroup):
    viewing = State()

class SourceFiltering(StatesGroup):
    filtering = State()

@router.message(Command("start"))
async def start(message: Message):
    role = await get_user_role(message.from_user.id)
    if role == "admin":
        greeting = "üëã –ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! –¢—ã –º–æ–∂–µ—à—å —É–ø—Ä–∞–≤–ª—è—Ç—å –±–æ—Ç–æ–º –∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–æ–≤–æ—Å—Ç–∏."
    elif role == "manager":
        greeting = "üëã –ü—Ä–∏–≤–µ—Ç, –º–µ–Ω–µ–¥–∂–µ—Ä! –¢—ã –º–æ–∂–µ—à—å –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –∏ –Ω–∞–∑–Ω–∞—á–∞—Ç—å –ø–∏—Å–∞—Ç–µ–ª–µ–π."
    elif role == "writer":
        greeting = "üëã –ü—Ä–∏–≤–µ—Ç, –ø–∏—Å–∞—Ç–µ–ª—å! –¢—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏."
    else:
        greeting = "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç—è–º–∏. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ üëá"

    await message.answer(
        greeting,
        reply_markup=get_menu_keyboard(role)
    )
    logger.info(f"User {message.from_user.id} started bot. Role: {role}")

@router.callback_query(lambda c: c.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery, state: FSMContext):
    role = await get_user_role(callback.from_user.id)
    await callback.message.edit_text(
        "üëã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ üëá",
        reply_markup=get_menu_keyboard(role)
    )
    await state.clear()
    await callback.answer()
    logger.info(f"User {callback.from_user.id} returned to main menu.")

@router.callback_query(lambda c: c.data == "view_news")
async def view_news(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    allowed, current_count, total_limit = await check_limit(user_id, "view_news")
    if not allowed:
        await callback.message.edit_text(
            f"‚ö†Ô∏è –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ª–∏–º–∏—Ç—ã –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–æ–≤–æ—Å—Ç–µ–π ({current_count}/{total_limit})!\n"
            "–•–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã? üíé",
            reply_markup=get_purchase_keyboard("view_news")
        )
        await callback.answer()
        logger.info(f"User {user_id} reached view limit: {current_count}/{total_limit}")
        return

    await callback.message.edit_text(
        "üìã –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–æ–≤–æ—Å—Ç–µ–π:",
        reply_markup=get_categories_keyboard()
    )
    await state.set_state(NewsViewing.viewing)
    await callback.answer()
    logger.info(f"User {callback.from_user.id} started viewing news.")

@router.callback_query(lambda c: c.data.startswith("category_"), NewsViewing.viewing)
async def select_category(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    allowed, current_count, total_limit = await check_limit(user_id, "view_news")
    if not allowed:
        await callback.message.edit_text(
            f"‚ö†Ô∏è –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ª–∏–º–∏—Ç—ã –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–æ–≤–æ—Å—Ç–µ–π ({current_count}/{total_limit})!\n"
            "–•–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã? üíé",
            reply_markup=get_purchase_keyboard("view_news")
        )
        await callback.answer()
        logger.info(f"User {user_id} reached view limit: {current_count}/{total_limit}")
        return

    await increment_limit(user_id, "view_news")
    category = callback.data.split("_")[1]
    news = await get_news(category=category, limit=10)
    if not news:
        await callback.message.edit_text(
            f"üì≠ –ù–æ–≤–æ—Å—Ç–µ–π –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category.capitalize()} –ø–æ–∫–∞ –Ω–µ—Ç.",
            reply_markup=get_categories_keyboard()
        )
        await callback.answer()
        logger.info(f"User {callback.from_user.id} found no news in category {category}.")
        return

    await state.update_data(news=news, current_index=0, category=category)
    news_item = news[0]
    likes, dislikes = await get_news_rating(news_item["news_id"])
    user_rating = await get_user_rating(callback.from_user.id, news_item["news_id"])
    rating_text = f"üëç {likes} | üëé {dislikes} | –í–∞—à –≥–æ–ª–æ—Å: {'üëç' if user_rating == 1 else 'üëé' if user_rating == -1 else '–Ω–µ –æ—Ü–µ–Ω–µ–Ω–æ'}"

    response = (
        f"üì∞ –ù–æ–≤–æ—Å—Ç—å (ID: {news_item['news_id']})\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {news_item['category'].capitalize()}\n"
        f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {news_item['title']}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {news_item['description']}\n"
    )
    if news_item['image_url']:
        response += f"üñº –ö–∞—Ä—Ç–∏–Ω–∫–∞: {news_item['image_url']}\n"
    response += f"–ò—Å—Ç–æ—á–Ω–∏–∫: {news_item['source']}\n"
    response += f"–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {news_item['published_at']}\n"
    response += f"–†–µ–π—Ç–∏–Ω–≥: {rating_text}"

    await callback.message.edit_text(
        response,
        reply_markup=get_news_navigation(news, 0, category)
    )
    await callback.answer()
    logger.info(f"User {callback.from_user.id} viewed news ID {news_item['news_id']} in category {category}.")

@router.callback_query(lambda c: c.data.startswith("prev_news_") or c.data.startswith("next_news_"),
                       NewsViewing.viewing)
async def navigate_news(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    allowed, current_count, total_limit = await check_limit(user_id, "view_news")
    if not allowed:
        await callback.message.edit_text(
            f"‚ö†Ô∏è –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ª–∏–º–∏—Ç—ã –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–æ–≤–æ—Å—Ç–µ–π ({current_count}/{total_limit})!\n"
            "–•–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã? üíé",
            reply_markup=get_purchase_keyboard("view_news")
        )
        await callback.answer()
        logger.info(f"User {user_id} reached view limit: {current_count}/{total_limit}")
        return

    await increment_limit(user_id, "view_news")
    data = await state.get_data()
    news = data.get("news", [])
    current_index = data.get("current_index", 0)
    category = data.get("category")

    if callback.data.startswith("prev_news_"):
        current_index -= 1
    else:
        current_index += 1

    await state.update_data(current_index=current_index)
    news_item = news[current_index]
    likes, dislikes = await get_news_rating(news_item["news_id"])
    user_rating = await get_user_rating(callback.from_user.id, news_item["news_id"])
    rating_text = f"üëç {likes} | üëé {dislikes} | –í–∞—à –≥–æ–ª–æ—Å: {'üëç' if user_rating == 1 else 'üëé' if user_rating == -1 else '–Ω–µ –æ—Ü–µ–Ω–µ–Ω–æ'}"

    response = (
        f"üì∞ –ù–æ–≤–æ—Å—Ç—å (ID: {news_item['news_id']})\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {news_item['category'].capitalize()}\n"
        f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {news_item['title']}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {news_item['description']}\n"
    )
    if news_item['image_url']:
        response += f"üñº –ö–∞—Ä—Ç–∏–Ω–∫–∞: {news_item['image_url']}\n"
    response += f"–ò—Å—Ç–æ—á–Ω–∏–∫: {news_item['source']}\n"
    response += f"–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {news_item['published_at']}\n"
    response += f"–†–µ–π—Ç–∏–Ω–≥: {rating_text}"

    await callback.message.edit_text(
        response,
        reply_markup=get_news_navigation(news, current_index, category)
    )
    await callback.answer()
    logger.info(f"User {callback.from_user.id} navigated to news ID {news_item['news_id']} in category {category}.")

@router.callback_query(lambda c: c.data.startswith("like_news_"))
async def like_news(callback: CallbackQuery, state: FSMContext):
    news_id = int(callback.data.split("_")[2])
    await set_news_rating(callback.from_user.id, news_id, 1)
    data = await state.get_data()
    news = data.get("news", [])
    current_index = data.get("current_index", 0)
    category = data.get("category")
    news_item = await get_news_by_id(news_id)
    likes, dislikes = await get_news_rating(news_id)
    user_rating = await get_user_rating(callback.from_user.id, news_id)
    rating_text = f"üëç {likes} | üëé {dislikes} | –í–∞—à –≥–æ–ª–æ—Å: {'üëç' if user_rating == 1 else 'üëé' if user_rating == -1 else '–Ω–µ –æ—Ü–µ–Ω–µ–Ω–æ'}"

    response = (
        f"üì∞ –ù–æ–≤–æ—Å—Ç—å (ID: {news_item['news_id']})\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {news_item['category'].capitalize()}\n"
        f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {news_item['title']}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {news_item['description']}\n"
    )
    if news_item['image_url']:
        response += f"üñº –ö–∞—Ä—Ç–∏–Ω–∫–∞: {news_item['image_url']}\n"
    response += f"–ò—Å—Ç–æ—á–Ω–∏–∫: {news_item['source']}\n"
    response += f"–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {news_item['published_at']}\n"
    response += f"–†–µ–π—Ç–∏–Ω–≥: {rating_text}"

    await callback.message.edit_text(
        response,
        reply_markup=get_news_navigation(news, current_index, category)
    )
    await callback.answer("üëç –í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –ª–∞–π–∫!")
    logger.info(f"User {callback.from_user.id} liked news ID {news_id}.")

@router.callback_query(lambda c: c.data.startswith("dislike_news_"))
async def dislike_news(callback: CallbackQuery, state: FSMContext):
    news_id = int(callback.data.split("_")[2])
    await set_news_rating(callback.from_user.id, news_id, -1)
    data = await state.get_data()
    news = data.get("news", [])
    current_index = data.get("current_index", 0)
    category = data.get("category")
    news_item = await get_news_by_id(news_id)
    likes, dislikes = await get_news_rating(news_id)
    user_rating = await get_user_rating(callback.from_user.id, news_id)
    rating_text = f"üëç {likes} | üëé {dislikes} | –í–∞—à –≥–æ–ª–æ—Å: {'üëç' if user_rating == 1 else 'üëé' if user_rating == -1 else '–Ω–µ –æ—Ü–µ–Ω–µ–Ω–æ'}"

    response = (
        f"üì∞ –ù–æ–≤–æ—Å—Ç—å (ID: {news_item['news_id']})\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {news_item['category'].capitalize()}\n"
        f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {news_item['title']}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {news_item['description']}\n"
    )
    if news_item['image_url']:
        response += f"üñº –ö–∞—Ä—Ç–∏–Ω–∫–∞: {news_item['image_url']}\n"
    response += f"–ò—Å—Ç–æ—á–Ω–∏–∫: {news_item['source']}\n"
    response += f"–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {news_item['published_at']}\n"
    response += f"–†–µ–π—Ç–∏–Ω–≥: {rating_text}"

    await callback.message.edit_text(
        response,
        reply_markup=get_news_navigation(news, current_index, category)
    )
    await callback.answer("üëé –í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –¥–∏–∑–ª–∞–π–∫!")
    logger.info(f"User {callback.from_user.id} disliked news ID {news_id}.")

@router.callback_query(lambda c: c.data == "filter_sources")
async def filter_sources(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üìã –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:",
        reply_markup=get_categories_keyboard()
    )
    await state.set_state(SourceFiltering.filtering)
    await callback.answer()
    logger.info(f"User {callback.from_user.id} started filtering sources.")

@router.callback_query(lambda c: c.data.startswith("category_"), SourceFiltering.filtering)
async def select_source_category(callback: CallbackQuery, state: FSMContext):
    category = callback.data.split("_")[1]
    sources = await get_sources(category=category)
    if not sources:
        await callback.message.edit_text(
            f"üì≠ –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category.capitalize()} –ø–æ–∫–∞ –Ω–µ—Ç.",
            reply_markup=get_categories_keyboard()
        )
        await callback.answer()
        logger.info(f"User {callback.from_user.id} found no sources in category {category}.")
        return

    await state.update_data(category=category)
    await callback.message.edit_text(
        f"üì° –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category.capitalize()}:",
        reply_markup=get_sources_keyboard(sources, category)
    )
    await callback.answer()
    logger.info(f"User {callback.from_user.id} viewed sources in category {category}.")

@router.callback_query(lambda c: c.data.startswith("source_"), SourceFiltering.filtering)
async def toggle_source(callback: CallbackQuery, state: FSMContext):
    data = callback.data.split("_")
    source_id = int(data[1])
    category = data[2]
    sources = await get_sources(category=category)
    for source in sources:
        if source["source_id"] == source_id:
            source["is_active"] = 1 if source["is_active"] == 0 else 0
            async with aiosqlite.connect("news_bot.db") as db:
                await db.execute(
                    "UPDATE sources SET is_active = ? WHERE source_id = ?",
                    (source["is_active"], source_id)
                )
                await db.commit()
            break

    await callback.message.edit_text(
        f"üì° –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category.capitalize()}:",
        reply_markup=get_sources_keyboard(sources, category)
    )
    await callback.answer("‚úÖ –°—Ç–∞—Ç—É—Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏–∑–º–µ–Ω—ë–Ω!")
    logger.info(f"User {callback.from_user.id} toggled source ID {source_id} in category {category}.")

@router.callback_query(lambda c: c.data == "profile")
async def show_profile(callback: CallbackQuery):
    user_id = callback.from_user.id
    stats = await get_user_stats(user_id)

    response = f"üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç\n\n"
    response += f"üßë –†–æ–ª—å: {stats['role'].capitalize()}\n"
    response += f"üìñ –õ–∏–º–∏—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {stats['view_count']}/{stats['view_limit']}\n"
    response += f"üëç –ü–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ª–∞–π–∫–æ–≤: {stats['likes']}\n"
    response += f"üëé –ü–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –¥–∏–∑–ª–∞–π–∫–æ–≤: {stats['dislikes']}\n"

    if stats["role"] == "writer":
        response += f"üìù –õ–∏–º–∏—Ç –ø–æ—Å—Ç–æ–≤: {stats['create_count']}/{stats['create_limit']}\n"
        response += f"\n‚úçÔ∏è –í–∞—à–∏ –Ω–æ–≤–æ—Å—Ç–∏:\n"
        response += f"- –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ: {stats['published_news']}\n"
        response += f"- –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ: {stats['pending_news']}\n"
        response += f"- –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {stats['average_rating']:.2f}\n"

    response += "\nüõí –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5):\n"
    if stats["purchases"]:
        for purchase in stats["purchases"]:
            action = "–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤" if purchase["action_type"] == "view_news" else "–ø–æ—Å—Ç–æ–≤"
            response += f"- {purchase['amount']} {action} –∑–∞ {purchase['cost']}‚ÇΩ ({purchase['purchase_date']})\n"
    else:
        response += "–ü–æ–∫—É–ø–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.\n"

    await callback.message.edit_text(
        response,
        reply_markup=get_profile_keyboard(stats["role"])
    )
    await callback.answer()
    logger.info(f"User {user_id} viewed their profile.")

@router.callback_query(lambda c: c.data == "manage_subscriptions")
async def manage_subscriptions(callback: CallbackQuery):
    user_id = callback.from_user.id
    subscribed_categories = await get_user_subscriptions(user_id)

    await callback.message.edit_text(
        "üîî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –∏–ª–∏ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è:",
        reply_markup=get_subscription_keyboard(subscribed_categories)
    )
    await callback.answer()
    logger.info(f"User {user_id} opened subscription management.")

@router.callback_query(lambda c: c.data.startswith("subscribe_"))
async def subscribe_category(callback: CallbackQuery):
    user_id = callback.from_user.id
    category = callback.data.split("_")[1]
    if await subscribe_to_category(user_id, category):
        subscribed_categories = await get_user_subscriptions(user_id)
        await callback.message.edit_text(
            "üîî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –∏–ª–∏ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è:",
            reply_markup=get_subscription_keyboard(subscribed_categories)
        )
        await callback.answer(f"‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é {category.capitalize()}!")
        logger.info(f"User {user_id} subscribed to category {category}.")
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)

@router.callback_query(lambda c: c.data.startswith("unsubscribe_"))
async def unsubscribe_category(callback: CallbackQuery):
    user_id = callback.from_user.id
    category = callback.data.split("_")[1]
    if await unsubscribe_from_category(user_id, category):
        subscribed_categories = await get_user_subscriptions(user_id)
        await callback.message.edit_text(
            "üîî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –∏–ª–∏ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è:",
            reply_markup=get_subscription_keyboard(subscribed_categories)
        )
        await callback.answer(f"‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category.capitalize()}!")
        logger.info(f"User {user_id} unsubscribed from category {category}.")
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)

@router.callback_query(lambda c: c.data.startswith("buy_limits_"))
async def buy_limits(callback: CallbackQuery):
    action_type = callback.data.split("_")[2]
    action_text = "–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤" if action_type == "view_news" else "–ø–æ—Å—Ç–æ–≤"
    await callback.message.edit_text(
        f"üíé –ü–æ–∫—É–ø–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö {action_text}\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:",
        reply_markup=get_quantity_keyboard(action_type)
    )
    await callback.answer()
    logger.info(f"User {callback.from_user.id} started buying limits for {action_type}.")

@router.callback_query(lambda c: c.data.startswith("purchase_"))
async def process_purchase(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    data = callback.data.split("_")
    action_type = data[1]
    quantity = int(data[2])
    cost = int(data[3])
    action_text = "–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤" if action_type == "view_news" else "–ø–æ—Å—Ç–æ–≤"

    # –°–æ–∑–¥–∞—ë–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ –ÆKassa
    description = f"–ü–æ–∫—É–ø–∫–∞ {quantity} {action_text} –≤ –±–æ—Ç–µ"
    payment = await create_payment(user_id, cost, description, action_type, quantity)
    if not payment:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_menu_keyboard(await get_user_role(user_id))
        )
        await callback.answer()
        logger.error(f"Failed to create payment for user {user_id}")
        return

    payment_id = payment["id"]
    confirmation_url = payment["confirmation"]["confirmation_url"]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–ª–∞—Ç–µ–∂–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(payment_id=payment_id, action_type=action_type, quantity=quantity, cost=cost)

    await callback.message.edit_text(
        f"üí≥ –î–ª—è –æ–ø–ª–∞—Ç—ã {quantity} {action_text} –Ω–∞ —Å—É–º–º—É {cost}‚ÇΩ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n{confirmation_url}\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É' üëá",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_payment_{payment_id}")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ])
    )
    await callback.answer()
    logger.info(f"User {user_id} created payment {payment_id} for {quantity} {action_type}.")

@router.callback_query(lambda c: c.data.startswith("check_payment_"))
async def check_payment_status(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    payment_id = callback.data.split("_")[2]
    data = await state.get_data()
    if data.get("payment_id") != payment_id:
        await callback.message.edit_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–ª–∞—Ç–µ–∂–∞.",
            reply_markup=get_menu_keyboard(await get_user_role(user_id))
        )
        await callback.answer()
        return

    payment = await check_payment(payment_id)
    if not payment:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_menu_keyboard(await get_user_role(user_id))
        )
        await callback.answer()
        return

    if payment["status"] == "succeeded":
        action_type = data["action_type"]
        quantity = data["quantity"]
        cost = data["cost"]
        action_text = "–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤" if action_type == "view_news" else "–ø–æ—Å—Ç–æ–≤"

        # –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–º–∏—Ç—ã –∏ –∑–∞–ø–∏—Å—å –æ –ø–æ–∫—É–ø–∫–µ
        await add_limit(user_id, action_type, quantity)
        await add_purchase(user_id, action_type, quantity, cost)

        await callback.message.edit_text(
            f"üéâ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n"
            f"–í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ {quantity} {action_text} –∑–∞ {cost}‚ÇΩ.\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å! üëá",
            reply_markup=get_menu_keyboard(await get_user_role(user_id))
        )
        await state.clear()
        await callback.answer()
        logger.info(f"User {user_id} successfully purchased {quantity} {action_type} for {cost}‚ÇΩ.")
    else:
        await callback.message.edit_text(
            f"‚è≥ –ü–ª–∞—Ç—ë–∂ –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω (—Å—Ç–∞—Ç—É—Å: {payment['status']}).\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_payment_{payment_id}")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
            ])
        )
        await callback.answer()
        logger.info(f"User {user_id} checked payment {payment_id}, status: {payment['status']}.")