import aiosqlite
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from keyboards.inline import get_admin_panel, get_user_selection_keyboard, get_confirmation_keyboard, \
    get_rss_management_keyboard
from utils.database import get_user_role, set_user_role, get_pending_news, approve_news, reject_news, remove_user_role, \
    get_sources
from utils.logger import logger

router = Router()

class AdminActions(StatesGroup):
    waiting_for_user_id = State()
    reviewing_news = State()

@router.callback_query(lambda c: c.data == "admin_panel")
async def admin_panel(callback: CallbackQuery):
    await callback.message.edit_text(
        "üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ üëá",
        reply_markup=get_admin_panel()
    )
    await callback.answer()
    logger.info(f"User {callback.from_user.id} opened admin panel.")

@router.callback_query(lambda c: c.data == "assign_manager")
async def assign_manager(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üë§ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:"
    )
    await state.set_state(AdminActions.waiting_for_user_id)
    await state.update_data(action="assign_manager")
    await callback.answer()
    logger.info(f"User {callback.from_user.id} started assigning manager role.")

@router.callback_query(lambda c: c.data == "assign_writer")
async def assign_writer(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–∏ –ø–∏—Å–∞—Ç–µ–ª—è:"
    )
    await state.set_state(AdminActions.waiting_for_user_id)
    await state.update_data(action="assign_writer")
    await callback.answer()
    logger.info(f"User {callback.from_user.id} started assigning writer role.")

@router.message(AdminActions.waiting_for_user_id)
async def process_user_id(message: Message, state: FSMContext):
    try:
        user_id = int(message.text)
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–∏—Å–ª–æ).",
            reply_markup=get_admin_panel()
        )
        await state.clear()
        return

    data = await state.get_data()
    action = data["action"]
    role = "manager" if action == "assign_manager" else "writer"

    current_role = await get_user_role(user_id)
    if current_role == role:
        await message.answer(
            f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —É–∂–µ –∏–º–µ–µ—Ç —Ä–æ–ª—å {role.capitalize()}.",
            reply_markup=get_admin_panel()
        )
        await state.clear()
        return

    await set_user_role(user_id, role)
    await message.answer(
        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–∞–∑–Ω–∞—á–µ–Ω –∫–∞–∫ {role.capitalize()}!",
        reply_markup=get_admin_panel()
    )
    await state.clear()
    logger.info(f"User {message.from_user.id} assigned role {role} to user {user_id}.")

@router.callback_query(lambda c: c.data == "remove_manager")
async def remove_manager(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üóë –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–æ–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:"
    )
    await state.set_state(AdminActions.waiting_for_user_id)
    await state.update_data(action="remove_manager")
    await callback.answer()
    logger.info(f"User {callback.from_user.id} started removing manager role.")

@router.callback_query(lambda c: c.data == "remove_writer")
async def remove_writer(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üóë –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–æ–ª–∏ –ø–∏—Å–∞—Ç–µ–ª—è:"
    )
    await state.set_state(AdminActions.waiting_for_user_id)
    await state.update_data(action="remove_writer")
    await callback.answer()
    logger.info(f"User {callback.from_user.id} started removing writer role.")

@router.message(AdminActions.waiting_for_user_id)
async def process_remove_user_id(message: Message, state: FSMContext):
    try:
        user_id = int(message.text)
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–∏—Å–ª–æ).",
            reply_markup=get_admin_panel()
        )
        await state.clear()
        return

    data = await state.get_data()
    action = data["action"]
    role = "manager" if action == "remove_manager" else "writer"

    if await remove_user_role(user_id, role):
        await message.answer(
            f"‚úÖ –†–æ–ª—å {role.capitalize()} —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id} —É–¥–∞–ª–µ–Ω–∞!",
            reply_markup=get_admin_panel()
        )
    else:
        await message.answer(
            f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –∏–º–µ–µ—Ç —Ä–æ–ª—å {role.capitalize()}.",
            reply_markup=get_admin_panel()
        )
    await state.clear()
    logger.info(f"User {message.from_user.id} removed role {role} from user {user_id}.")

@router.callback_query(lambda c: c.data == "review_news")
async def review_news(callback: CallbackQuery, state: FSMContext):
    pending_news = await get_pending_news()
    if not pending_news:
        await callback.message.edit_text(
            "üì≠ –ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ.",
            reply_markup=get_admin_panel()
        )
        await callback.answer()
        return

    await state.update_data(pending_news=pending_news, current_index=0)
    news_item = pending_news[0]
    response = (
        f"üì∞ –ù–æ–≤–æ—Å—Ç—å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ (ID: {news_item['pending_id']})\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {news_item['category'].capitalize()}\n"
        f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {news_item['title']}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {news_item['description']}\n"
    )
    if news_item['image_url']:
        response += f"üñº –ö–∞—Ä—Ç–∏–Ω–∫–∞: {news_item['image_url']}\n"
    response += f"–ê–≤—Ç–æ—Ä: ID {news_item['writer_id']}\n"
    response += f"–°–æ–∑–¥–∞–Ω–∞: {news_item['created_at']}\n"

    kb = [
        [InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_news_{news_item['pending_id']}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_news_{news_item['pending_id']}")],
    ]
    if len(pending_news) > 1:
        kb.append([InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è", callback_data="next_pending_0")])
    kb.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")])

    await callback.message.edit_text(
        response,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=kb)
    )
    await state.set_state(AdminActions.reviewing_news)
    await callback.answer()
    logger.info(f"User {callback.from_user.id} started reviewing pending news.")

@router.callback_query(lambda c: c.data.startswith("next_pending_"), AdminActions.reviewing_news)
async def next_pending_news(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    pending_news = data.get("pending_news", [])
    current_index = int(callback.data.split("_")[2])
    current_index = (current_index + 1) % len(pending_news)

    await state.update_data(current_index=current_index)
    news_item = pending_news[current_index]
    response = (
        f"üì∞ –ù–æ–≤–æ—Å—Ç—å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ (ID: {news_item['pending_id']})\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {news_item['category'].capitalize()}\n"
        f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {news_item['title']}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {news_item['description']}\n"
    )
    if news_item['image_url']:
        response += f"üñº –ö–∞—Ä—Ç–∏–Ω–∫–∞: {news_item['image_url']}\n"
    response += f"–ê–≤—Ç–æ—Ä: ID {news_item['writer_id']}\n"
    response += f"–°–æ–∑–¥–∞–Ω–∞: {news_item['created_at']}\n"

    kb = [
        [InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_news_{news_item['pending_id']}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_news_{news_item['pending_id']}")],
    ]
    if len(pending_news) > 1:
        kb.append([
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"next_pending_{(current_index - 1) % len(pending_news)}"),
            InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è", callback_data=f"next_pending_{(current_index + 1) % len(pending_news)}")
        ])
    kb.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")])

    await callback.message.edit_text(
        response,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=kb)
    )
    await callback.answer()
    logger.info(f"User {callback.from_user.id} navigated to pending news ID {news_item['pending_id']}.")

@router.callback_query(lambda c: c.data.startswith("approve_news_"), AdminActions.reviewing_news)
async def approve_news_handler(callback: CallbackQuery, state: FSMContext):
    pending_id = int(callback.data.split("_")[2])
    news_id = await approve_news(pending_id)
    if news_id is None:
        await callback.message.edit_text(
            "‚ùå –ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
            reply_markup=get_admin_panel()
        )
        await state.clear()
        await callback.answer()
        return

    pending_news = await get_pending_news()
    if not pending_news:
        await callback.message.edit_text(
            "üì≠ –ë–æ–ª—å—à–µ –Ω–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ.",
            reply_markup=get_admin_panel()
        )
        await state.clear()
    else:
        await state.update_data(pending_news=pending_news, current_index=0)
        news_item = pending_news[0]
        response = (
            f"üì∞ –ù–æ–≤–æ—Å—Ç—å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ (ID: {news_item['pending_id']})\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {news_item['category'].capitalize()}\n"
            f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {news_item['title']}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {news_item['description']}\n"
        )
        if news_item['image_url']:
            response += f"üñº –ö–∞—Ä—Ç–∏–Ω–∫–∞: {news_item['image_url']}\n"
        response += f"–ê–≤—Ç–æ—Ä: ID {news_item['writer_id']}\n"
        response += f"–°–æ–∑–¥–∞–Ω–∞: {news_item['created_at']}\n"

        kb = [
            [InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_news_{news_item['pending_id']}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_news_{news_item['pending_id']}")],
        ]
        if len(pending_news) > 1:
            kb.append([InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è", callback_data="next_pending_0")])
        kb.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")])

        await callback.message.edit_text(
            response,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=kb)
        )

    await callback.answer(f"‚úÖ –ù–æ–≤–æ—Å—Ç—å ID {pending_id} –æ–¥–æ–±—Ä–µ–Ω–∞! –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –∫–∞–∫ ID {news_id}.")
    logger.info(f"User {callback.from_user.id} approved news ID {pending_id} as news ID {news_id}.")

@router.callback_query(lambda c: c.data.startswith("reject_news_"), AdminActions.reviewing_news)
async def reject_news_handler(callback: CallbackQuery, state: FSMContext):
    pending_id = int(callback.data.split("_")[2])
    await reject_news(pending_id)

    pending_news = await get_pending_news()
    if not pending_news:
        await callback.message.edit_text(
            "üì≠ –ë–æ–ª—å—à–µ –Ω–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ.",
            reply_markup=get_admin_panel()
        )
        await state.clear()
    else:
        await state.update_data(pending_news=pending_news, current_index=0)
        news_item = pending_news[0]
        response = (
            f"üì∞ –ù–æ–≤–æ—Å—Ç—å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ (ID: {news_item['pending_id']})\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {news_item['category'].capitalize()}\n"
            f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {news_item['title']}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {news_item['description']}\n"
        )
        if news_item['image_url']:
            response += f"üñº –ö–∞—Ä—Ç–∏–Ω–∫–∞: {news_item['image_url']}\n"
        response += f"–ê–≤—Ç–æ—Ä: ID {news_item['writer_id']}\n"
        response += f"–°–æ–∑–¥–∞–Ω–∞: {news_item['created_at']}\n"

        kb = [
            [InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_news_{news_item['pending_id']}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_news_{news_item['pending_id']}")],
        ]
        if len(pending_news) > 1:
            kb.append([InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è", callback_data="next_pending_0")])
        kb.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")])

        await callback.message.edit_text(
            response,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=kb)
        )

    await callback.answer(f"‚ùå –ù–æ–≤–æ—Å—Ç—å ID {pending_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
    logger.info(f"User {callback.from_user.id} rejected news ID {pending_id}.")

@router.callback_query(lambda c: c.data == "admin_stats")
async def admin_stats(callback: CallbackQuery):
    async with aiosqlite.connect("news_bot.db") as db:
        cursor = await db.execute("SELECT COUNT(*) FROM users")
        total_users = (await cursor.fetchone())[0]

        cursor = await db.execute("SELECT COUNT(*) FROM news")
        total_news = (await cursor.fetchone())[0]

        cursor = await db.execute("SELECT COUNT(*) FROM pending_news")
        pending_news = (await cursor.fetchone())[0]

        cursor = await db.execute("SELECT COUNT(*) FROM sources")
        total_sources = (await cursor.fetchone())[0]

    response = (
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"üì∞ –í—Å–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {total_news}\n"
        f"‚è≥ –ù–æ–≤–æ—Å—Ç–µ–π –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ: {pending_news}\n"
        f"üì° –í—Å–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {total_sources}\n"
    )

    await callback.message.edit_text(
        response,
        reply_markup=get_admin_panel()
    )
    await callback.answer()
    logger.info(f"User {callback.from_user.id} viewed admin stats.")

@router.callback_query(lambda c: c.data == "manage_rss")
async def manage_rss(callback: CallbackQuery):
    sources = await get_sources()
    if not sources:
        await callback.message.edit_text(
            "üì≠ –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.",
            reply_markup=get_admin_panel()
        )
        await callback.answer()
        return

    await callback.message.edit_text(
        "üì° –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ RSS-–ª–µ–Ω—Ç–∞–º–∏:",
        reply_markup=get_rss_management_keyboard(sources)
    )
    await callback.answer()
    logger.info(f"User {callback.from_user.id} opened RSS management.")