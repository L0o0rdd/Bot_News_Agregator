from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from keyboards.inline import get_manager_panel, get_confirmation_keyboard, get_user_selection_keyboard
from utils.database import get_user_role, set_user_role, get_pending_news, approve_news, reject_news, remove_user_role, \
    get_users_by_role

router = Router()


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–µ–π
class AssignRole(StatesGroup):
    waiting_for_id = State()
    waiting_for_confirmation = State()


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–æ–ª–µ–π
class RemoveRole(StatesGroup):
    waiting_for_id = State()
    waiting_for_reason = State()
    waiting_for_confirmation = State()


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
class ReviewNews(StatesGroup):
    waiting_for_action = State()


@router.callback_query(lambda c: c.data == "manager_panel")
async def manager_panel(callback: CallbackQuery):
    if await get_user_role(callback.from_user.id) != "manager":
        await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", show_alert=True)
        return
    await callback.message.edit_text(
        "üì¢ –ü–∞–Ω–µ–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá",
        reply_markup=get_manager_panel()
    )
    await callback.answer()


@router.callback_query(lambda c: c.data == "assign_writer")
async def assign_writer(callback: CallbackQuery, state: FSMContext):
    if await get_user_role(callback.from_user.id) != "manager":
        await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", show_alert=True)
        return
    await callback.message.edit_text(
        "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –ø–∏—Å–∞—Ç–µ–ª–µ–º:",
        reply_markup=None
    )
    await state.set_state(AssignRole.waiting_for_id)
    await state.update_data(role="writer")
    await callback.answer()


@router.message(AssignRole.waiting_for_id)
async def process_writer_id(message: Message, state: FSMContext):
    if await get_user_role(message.from_user.id) != "manager":
        await message.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    try:
        user_id = int(message.text)
        current_role = await get_user_role(user_id)
        data = await state.get_data()
        new_role = data["role"]

        if current_role == new_role:
            await message.answer(
                f"üö´ –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ {new_role}!",
                reply_markup=get_manager_panel()
            )
            await state.clear()
            return

        await state.update_data(user_id=user_id)
        await message.answer(
            f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –∏–º–µ–µ—Ç —Ä–æ–ª—å: {current_role}\n"
            f"–ù–∞–∑–Ω–∞—á–∏—Ç—å —Ä–æ–ª—å {new_role}?",
            reply_markup=get_confirmation_keyboard("confirm_role", "cancel_role")
        )
        await state.set_state(AssignRole.waiting_for_confirmation)
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).",
            reply_markup=get_manager_panel()
        )
        await state.clear()


@router.callback_query(lambda c: c.data == "confirm_role")
async def confirm_role(callback: CallbackQuery, state: FSMContext):
    if await get_user_role(callback.from_user.id) != "manager":
        await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", show_alert=True)
        return
    data = await state.get_data()
    user_id = data["user_id"]
    role = data["role"]
    await set_user_role(user_id, role)
    await callback.message.edit_text(
        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–∞–∑–Ω–∞—á–µ–Ω {role}!",
        reply_markup=get_manager_panel()
    )
    try:
        await callback.message.bot.send_message(
            user_id,
            f"üéâ –í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Ä–æ–ª—å {role}!"
        )
    except:
        pass
    await state.clear()
    await callback.answer()


@router.callback_query(lambda c: c.data == "cancel_role")
async def cancel_role(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üö´ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=get_manager_panel()
    )
    await state.clear()
    await callback.answer()


@router.callback_query(lambda c: c.data == "remove_writer")
async def remove_writer(callback: CallbackQuery, state: FSMContext):
    if await get_user_role(callback.from_user.id) != "manager":
        await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", show_alert=True)
        return
    writers = await get_users_by_role("writer")
    if not writers:
        await callback.message.edit_text(
            "üì≠ –ù–µ—Ç –ø–∏—Å–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
            reply_markup=get_manager_panel()
        )
        await callback.answer()
        return
    print(f"Writers list: {writers}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    await callback.message.edit_text(
        "‚úçÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø–∏—Å–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=get_user_selection_keyboard(writers, "remove_writer")
    )
    await state.set_state(RemoveRole.waiting_for_id)
    await callback.answer()


@router.callback_query(lambda c: c.data.startswith("select_user_"), RemoveRole.waiting_for_id)
async def process_remove_user_id(callback: CallbackQuery, state: FSMContext):
    print(f"Callback data: {callback.data}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    parts = callback.data.split("_")
    if len(parts) < 5 or not parts[-1].isdigit():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å ‚Äî —á–∏—Å–ª–æ
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
            reply_markup=get_manager_panel()
        )
        await callback.answer()
        return
    user_id = int(parts[-1])  # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏
    await state.update_data(user_id=user_id)
    await callback.message.edit_text(
        f"üìù –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É —É–¥–∞–ª–µ–Ω–∏—è —Ä–æ–ª–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id}:",
        reply_markup=None
    )
    await state.set_state(RemoveRole.waiting_for_reason)
    await callback.answer()


@router.message(RemoveRole.waiting_for_reason)
async def process_remove_reason(message: Message, state: FSMContext):
    if await get_user_role(message.from_user.id) != "manager":
        await message.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    reason = message.text
    await state.update_data(reason=reason)
    data = await state.get_data()
    user_id = data["user_id"]
    await message.answer(
        f"‚ÑπÔ∏è –£–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id}?\n–ü—Ä–∏—á–∏–Ω–∞: {reason}",
        reply_markup=get_confirmation_keyboard("confirm_remove_role", "cancel_remove_role")
    )
    await state.set_state(RemoveRole.waiting_for_confirmation)


@router.callback_query(lambda c: c.data == "confirm_remove_role")
async def confirm_remove_role(callback: CallbackQuery, state: FSMContext):
    if await get_user_role(callback.from_user.id) != "manager":
        await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", show_alert=True)
        return
    data = await state.get_data()
    user_id = data["user_id"]
    reason = data["reason"]
    role = await get_user_role(user_id)
    if role != "writer":
        await callback.message.edit_text(
            "üö´ –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —Ä–æ–ª—å!",
            reply_markup=get_manager_panel()
        )
        await state.clear()
        await callback.answer()
        return
    await remove_user_role(user_id)
    await callback.message.edit_text(
        f"‚úÖ –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id} —É–¥–∞–ª–µ–Ω–∞!",
        reply_markup=get_manager_panel()
    )
    try:
        await callback.message.bot.send_message(
            user_id,
            f"‚ùå –í–∞—à–∞ —Ä–æ–ª—å {role} –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}"
        )
    except:
        pass
    await state.clear()
    await callback.answer()


@router.callback_query(lambda c: c.data == "cancel_remove_role")
async def cancel_remove_role(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üö´ –£–¥–∞–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=get_manager_panel()
    )
    await state.clear()
    await callback.answer()


@router.callback_query(lambda c: c.data == "review_news")
async def review_news(callback: CallbackQuery, state: FSMContext):
    if await get_user_role(callback.from_user.id) != "manager":
        await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", show_alert=True)
        return
    pending_news = await get_pending_news()
    if not pending_news:
        await callback.message.edit_text(
            "üì≠ –ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ.",
            reply_markup=get_manager_panel()
        )
        await callback.answer()
        return

    news = pending_news[0]
    response = (
        f"üì∞ –ù–æ–≤–æ—Å—Ç—å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ (ID: {news['pending_id']})\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {news['category'].capitalize()}\n"
        f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {news['title']}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {news['description']}\n"
    )
    if news['image_url']:
        response += f"üñº –ö–∞—Ä—Ç–∏–Ω–∫–∞: {news['image_url']}\n"
    response += f"–ê–≤—Ç–æ—Ä ID: {news['author_id']}\n"

    await callback.message.edit_text(
        response,
        reply_markup=get_confirmation_keyboard(f"approve_news_{news['pending_id']}",
                                               f"reject_news_{news['pending_id']}")
    )
    await state.set_state(ReviewNews.waiting_for_action)
    await callback.answer()


@router.callback_query(lambda c: c.data.startswith("approve_news_"))
async def approve_news_action(callback: CallbackQuery, state: FSMContext):
    if await get_user_role(callback.from_user.id) != "manager":
        await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", show_alert=True)
        return
    pending_id = int(callback.data.split("_")[2])
    author_id = await approve_news(pending_id)
    await callback.message.edit_text(
        "‚úÖ –ù–æ–≤–æ—Å—Ç—å –æ–¥–æ–±—Ä–µ–Ω–∞ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!",
        reply_markup=get_manager_panel()
    )
    if author_id:
        try:
            await callback.message.bot.send_message(
                author_id,
                "üéâ –í–∞—à–∞ –Ω–æ–≤–æ—Å—Ç—å –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!"
            )
        except:
            pass
    await state.clear()
    await callback.answer()


@router.callback_query(lambda c: c.data.startswith("reject_news_"))
async def reject_news_action(callback: CallbackQuery, state: FSMContext):
    if await get_user_role(callback.from_user.id) != "manager":
        await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", show_alert=True)
        return
    pending_id = int(callback.data.split("_")[2])
    author_id = await reject_news(pending_id)
    await callback.message.edit_text(
        "‚ùå –ù–æ–≤–æ—Å—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.",
        reply_markup=get_manager_panel()
    )
    if author_id:
        try:
            await callback.message.bot.send_message(
                author_id,
                "‚ùå –í–∞—à–∞ –Ω–æ–≤–æ—Å—Ç—å –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞."
            )
        except:
            pass
    await state.clear()
    await callback.answer()